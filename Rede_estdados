//LISTA = REFERÃŠNCIAS ENCADEADAS
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <String.h>
typedef struct no{
    char User[52];
    struct no *Prox;
    struct no *Anter;
}No;

typedef struct{
    No* cabeca, *cauda;
}Lista;

void cria_lista(Lista* lista){
    lista->cabeca=NULL;
    lista->cauda=NULL;
}
No* busca(Lista* lista, char stringx[52]){
    No* atual=lista->cabeca, *inicial=lista->cabeca;
    int test = strcmp(atual->User,stringx);
    printf("%d\n",test);
    if(test==0){
        printf("b%s\n", stringx);
        printf("b%s", atual->User);
        atual=atual->Prox;
        while(strcmp(atual->User,stringx)!=0 && atual!=inicial){
            atual=atual->Prox;
        }
        if(strcmp(atual->User,stringx)==0){
            return atual;
        }
        if(atual==inicial){
            return NULL;
        }
    }
    else{return atual;}
        
    }       
    void remover(Lista* lista, char stringx[52], FILE* output){
    No* no_interesse=busca(lista,stringx);
    if(no_interesse==NULL){
        fprintf(output, "[ERROR] REMOVE %s\n",stringx);
    }
    else{
        no_interesse->Prox->Anter=no_interesse->Anter;
        no_interesse->Anter->Prox=no_interesse->Prox;
        free(no_interesse);
        no_interesse=NULL;
        fprintf(output, "[ OK  ] REMOVE %s\n",stringx);
    }
}
    
void insere(Lista* lista, char stringx[52], FILE* output){
    No* novo = malloc(sizeof(No));
    if (lista->cabeca!=NULL)
    {
        strcpy(novo->User,stringx);
        lista->cauda=novo;
        novo->Prox=lista->cabeca;
        novo->Anter=lista->cauda;
        lista->cauda->Prox=novo;
        lista->cabeca->Anter=novo;
        lista->cauda=novo;
        fprintf(output, "[ OK  ] ADD %s\n",stringx);
    }
    
    else{
        strcpy(novo->User,stringx);
        lista->cabeca=novo;
        lista->cauda=novo;
        lista->cabeca->Anter=lista->cauda;
        lista->cabeca->Prox=lista->cauda;
        lista->cauda->Anter=lista->cabeca;
        lista->cauda->Prox=lista->cabeca;
        fprintf(output, "[ OK  ] ADD %s\n",stringx);
    } 
}

void show(Lista* lista, char stringx[52], FILE* output){
    No* no_interesse = busca(lista,stringx);
    
    
    if(strcmp(no_interesse->User,stringx)==0){
        fprintf(output, "[ OK  ] %s<-%s->%s\n", no_interesse->Anter->User, no_interesse->User, no_interesse->Prox->User);
        printf("%s",no_interesse->Anter->User);
    }
    else{
        fprintf(output, "[ERROR] ?<-%s->?\n", stringx);
    }
}
int main(int argc, char*argv[]){
    FILE *input= NULL;
    input = fopen(argv[1],"r");
    if(input==NULL){
        printf("ERRO!");
        fclose(input);
        return 0;
    }
    FILE *output= NULL;
    output=fopen(argv[2],"w");
    if(output==NULL){
        printf("ERRO!");
        fclose(output);
        return 0;
    }
    Lista Rede;
    cria_lista(&Rede);
    char* oper = malloc(6*sizeof(char));
    char* nome = malloc(52*sizeof(char));
    int i = 0;
    while(i<2){
        i++;
        fscanf(input,"%s",oper);
        fgets(nome,52*sizeof(char),input);
        nome = nome+1;
        printf("%s ",oper);
        printf("%s\n",nome);
        if(strcmp(oper,"ADD")==0){
            insere(&Rede,nome,output);
            continue;
    }
        if(strcmp(oper,"SHOW")==0){
            show(&Rede,nome,output);
            continue;
    }
        if(strcmp(oper,"REMOVE")==0){
            remover(&Rede,nome,output);
            continue;
    }}

    }
